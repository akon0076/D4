#set($vmType="serviceBean")
#set($extension=".java")
#set($packageName="${entityClass.packages.replace('entity', 'service')}.impl")
#set($EntityNameUp="${entityClass.className}")
#set($EntityNameLow="${entityClass.className.substring(0,1).toLowerCase()}${entityClass.className.substring(1)}")
#set($className="${entityClass.className}${stringUtils.capitalize(${vmType})}")
#set($path="${config.serverPath}/src/main/java/${packageName.replace('.', '/')}")
#set($outputFile="${path}/$className${extension}")
package ${packageName};

import ${config.basePackage}.${entityClass.subSystemName}.dao.${entityClass.moduleName}.${EntityNameUp}Dao;

import com.cisdi.info.simple.entity.base.BaseEntity;
import com.cisdi.info.simple.dto.base.PageDTO;
import com.cisdi.info.simple.dto.base.PageResultDTO;
import com.cisdi.info.simple.util.D4Util;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import ${entityClass.clazz.name};
import com.cisdi.info.simple.service.base.BaseService;
import ${config.basePackage}.${entityClass.subSystemName}.service.${entityClass.moduleName}.${EntityNameUp}Service;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import java.util.List;
import java.util.Map;
import com.cisdi.info.simple.DDDException;

@Service
@Transactional
public class ${EntityNameUp}ServiceBean extends BaseService implements ${EntityNameUp}Service {

	private static Logger logger = LogManager.getLogger();

	@Autowired
	private ${EntityNameUp}Dao ${EntityNameLow}Dao;

	/**
	 * 根据分页参数查询${entityClass.label}集合
	 *
	 * @param pageDTO 分页条件
	 */
	@Override
	public PageResultDTO find${EntityNameUp}s(PageDTO pageDTO){
        pageDTO.setStartIndex((pageDTO.getCurrentPage()-1)*pageDTO.getPageSize());
		List<${EntityNameUp}> ${EntityNameLow}DTOS = this.${EntityNameLow}Dao.find${EntityNameUp}s(pageDTO);
		Long totalCount = this.${EntityNameLow}Dao.find${EntityNameUp}TotalCount(pageDTO);

		PageResultDTO pageResultDTO = new PageResultDTO();
		pageResultDTO.setTotalCount(totalCount);
		pageResultDTO.setDatas(${EntityNameLow}DTOS);

		return pageResultDTO;
	}

	/**
	 * 查询全部${entityClass.label}集合
	 *
	 */
	@Override
	public List<${EntityNameUp}> findAll${EntityNameUp}s(){
		return this.${EntityNameLow}Dao.findAll${EntityNameUp}s();
	}

	/**
	 * 查询所有${entityClass.label}集合(只提取ID 和 Name)
	 *
	 */
	@Override
	public List<${EntityNameUp}> findAll${EntityNameUp}sWithIdName(){
		return this.${EntityNameLow}Dao.findAll${EntityNameUp}sWithIdName();
	}

	/**
	 * 根据名称查询${entityClass.label}集合(只提取ID 和 Name)
	 *
	 * @param ${EntityNameLow}Name 名称
	 */
	@Override
	public List<${EntityNameUp}> find${EntityNameUp}sWithIdNameByName(String ${EntityNameLow}Name){
		return this.${EntityNameLow}Dao.find${EntityNameUp}sWithIdNameByName(${EntityNameLow}Name);
	}

	/**
	 * 根据ID查询指定的${entityClass.label}(只提取ID 和 Name)
	 *
	 * @param ${EntityNameLow}Id Id
	 */
	@Override
	public ${EntityNameUp} find${EntityNameUp}sWithIdNameById(Long ${EntityNameLow}Id){
		return this.${EntityNameLow}Dao.find${EntityNameUp}sWithIdNameById(${EntityNameLow}Id);
	}

	/**
	 * 根据ID查询指定的${entityClass.label}
	 *
	 * @param ${EntityNameLow}Id Id
	 */
	@Override
	public ${EntityNameUp} find${EntityNameUp}(Long ${EntityNameLow}Id){
		return this.${EntityNameLow}Dao.find${EntityNameUp}(${EntityNameLow}Id);
	}

	/**
	 * 根据ID查询指定的${entityClass.label}(包含外键)
	 *
	 * @param ${EntityNameLow}Id Id
	 */
	@Override
	public ${EntityNameUp} find${EntityNameUp}WithForeignName(Long ${EntityNameLow}Id){
		return this.${EntityNameLow}Dao.find${EntityNameUp}WithForeignName(${EntityNameLow}Id);
	}

	/**
	 * 新增${entityClass.label}
	 *
	 * @param ${EntityNameLow} 实体对象
	 */
	@Override
	public ${EntityNameUp} save${EntityNameUp}(${EntityNameUp} ${EntityNameLow}){
		//TODO:请在此校验参数的合法性
		this.setSavePulicColumns(${EntityNameLow});
		Integer rows = this.${EntityNameLow}Dao.save${EntityNameUp}(${EntityNameLow});
		if(rows != 1)
		{
			String error = "新增保存${entityClass.label}出错，数据库应该返回1,但返回了 "+rows;
			throw new DDDException(error);
		}
		return ${EntityNameLow};
	}

	/**
	 * 更新${entityClass.label}
	 *
	 * @param ${EntityNameLow} 实体对象
	 */
	@Override
	public ${EntityNameUp} update${EntityNameUp}(${EntityNameUp} ${EntityNameLow}){
		//TODO:请在此校验参数的合法性
		this.setUpdatePulicColumns(${EntityNameLow});
		Integer rows = this.${EntityNameLow}Dao.update${EntityNameUp}(${EntityNameLow});
		if(rows != 1)
		{
			String error = "修改保存${entityClass.label}出错，数据库应该返回1,但返回了 "+rows+",数据可能被删除";
			throw new DDDException(error);
		}
		return ${EntityNameLow};
	}

	/**
	 * 根据ID删除${entityClass.label}
	 *
	 * @param ${EntityNameLow}Id ID
	 */
	@Override
	public void delete${EntityNameUp}(Long ${EntityNameLow}Id){
		Map<Class<? extends BaseEntity>,EntityUsage> entityUsageMap = this.checkForeignEntity(${EntityNameUp}.class, ${EntityNameLow}Id);
		if(entityUsageMap != null && entityUsageMap.size() >0){
			StringBuilder errors = new StringBuilder();
			errors.append("计划删除的数据正在被以下数引用\n");
			for(EntityUsage entityUsage : entityUsageMap.values()){
				errors.append("\t").append(entityUsage.getEntityLabel()).append("\n");
				for(Map.Entry<Long,String> entry : entityUsage.getUsageIdNames().entrySet() ){
					errors.append("\t\t").append(entry.getKey()).append("\t").append(entry.getValue()).append("\n");
				}
			}
			errors.append("，不能删除，请检查处理后再删除");
			throw  new DDDException(errors.toString());
		}

		Integer rows = this.${EntityNameLow}Dao.delete${EntityNameUp}(${EntityNameLow}Id);
		if(rows != 1){
			String error = "删除${entityClass.label}出错，数据可能已经被删除";
			throw new DDDException(error);
		}
	}
}
